/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package pt.up.yap.lib;

public final class PropTag {
  public final static PropTag PRED_TAG = new PropTag("PRED_TAG", yapJNI.PRED_TAG_get());
  public final static PropTag DB_TAG = new PropTag("DB_TAG", yapJNI.DB_TAG_get());
  public final static PropTag FUNCTOR_TAG = new PropTag("FUNCTOR_TAG", yapJNI.FUNCTOR_TAG_get());
  public final static PropTag ARITHMETIC_PROPERTY_TAG = new PropTag("ARITHMETIC_PROPERTY_TAG", yapJNI.ARITHMETIC_PROPERTY_TAG_get());
  public final static PropTag TRANSLATION_TAG = new PropTag("TRANSLATION_TAG", yapJNI.TRANSLATION_TAG_get());
  public final static PropTag HOLD_TAG = new PropTag("HOLD_TAG", yapJNI.HOLD_TAG_get());
  public final static PropTag MUTEX_TAG = new PropTag("MUTEX_TAG", yapJNI.MUTEX_TAG_get());
  public final static PropTag ARRAY_TAG = new PropTag("ARRAY_TAG", yapJNI.ARRAY_TAG_get());
  public final static PropTag WIDE_TAG = new PropTag("WIDE_TAG", yapJNI.WIDE_TAG_get());
  public final static PropTag MODULE_TAG = new PropTag("MODULE_TAG", yapJNI.MODULE_TAG_get());
  public final static PropTag BLACKBOARD_TAG = new PropTag("BLACKBOARD_TAG", yapJNI.BLACKBOARD_TAG_get());
  public final static PropTag VALUE_TAG = new PropTag("VALUE_TAG", yapJNI.VALUE_TAG_get());
  public final static PropTag GLOBAL_VAR_TAG = new PropTag("GLOBAL_VAR_TAG", yapJNI.GLOBAL_VAR_TAG_get());
  public final static PropTag BLOB_TAG = new PropTag("BLOB_TAG", yapJNI.BLOB_TAG_get());
  public final static PropTag OPERATOR_TAG = new PropTag("OPERATOR_TAG", yapJNI.OPERATOR_TAG_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static PropTag swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + PropTag.class + " with value " + swigValue);
  }

  private PropTag(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private PropTag(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private PropTag(String swigName, PropTag swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static PropTag[] swigValues = { PRED_TAG, DB_TAG, FUNCTOR_TAG, ARITHMETIC_PROPERTY_TAG, TRANSLATION_TAG, HOLD_TAG, MUTEX_TAG, ARRAY_TAG, WIDE_TAG, MODULE_TAG, BLACKBOARD_TAG, VALUE_TAG, GLOBAL_VAR_TAG, BLOB_TAG, OPERATOR_TAG };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

